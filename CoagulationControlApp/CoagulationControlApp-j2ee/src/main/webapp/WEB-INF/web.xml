<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" metadata-complete="true">
	
	<display-name>Coagulation Control</display-name>
					
	<!-- Make sure that the database is properly deployed when the app is launched -->
	<context-param>
    	<param-name>dwo-auto-deploy-jsonstore</param-name>
    	<param-value>true</param-value>
  	</context-param>
  	
<!-- 	
	<context-param>
    	<param-name>dwo-sync-enabled</param-name>
    	<param-value>false</param-value>
  	</context-param>
		<context-param>
    	<param-name>dwo-sync-trace</param-name>
    	<param-value>true</param-value>
  	</context-param>
	<context-param>
    	<param-name>dwo-sync-emptyjsondbonstart</param-name>
    	<param-value>false</param-value>
  	</context-param>
 	<context-param>
    	<param-name>dwo-sync-mode</param-name>
    	<param-value>pull+push</param-value>
  	</context-param>
	<context-param>
    	<param-name>dwo-sync-url</param-name>
    	<param-value>http://myserver.mydomain.com/mysyncapp</param-value>
    </context-param>
	<context-param>
    	<param-name>dwo-sync-user</param-name>
    	<param-value>MyUser</param-value>
  	</context-param>
	<context-param>
    	<param-name>dwo-sync-password</param-name>
    	<param-value>MyPassword</param-value>
  	</context-param>
-->  	
	
	<!-- Application initialization -->
	<listener>
	    <listener-class>
			biz.webgate.darwino.coag.app.AppContextListener        
	    </listener-class>
	</listener>
	
	<!--  Mapping for web resources -->
	<!--  Mapping to /* prevents the <welcome-file-list> to be honored. To work it around, the servlet -->
	<!--  has an optional welcome-file parameter. -->
	<!--  The other solution is to map a subpath, like /mobile/* -->
	<servlet-mapping>
		<servlet-name>FilesServlet</servlet-name>
		<url-pattern>/*</url-pattern>
		<!-- <url-pattern>/mobile/*</url-pattern> -->
	</servlet-mapping>
	<servlet>
		<display-name>Default Files Servlet</display-name>
		<servlet-name>FilesServlet</servlet-name>
		<servlet-class>com.darwino.j2ee.servlet.resources.DarwinoAppResourcesServlet</servlet-class>
		<init-param>
			<param-name>welcome-file</param-name>
			<param-value>/index.html</param-value>
		</init-param>
	</servlet>
 
	<!--  Filter for custom authentication -->
	<!--  This should be the first one, before the J2EE filter as the user is required for the session  -->
	<!--  Note that the server level authentication should be disabled then  -->
	<!--  Bellow is the list of the available classes  -->
	<!--  <filter-class>com.darwino.j2ee.servlet.authentication.BasicAuthenticationFilter</filter-class> -->
   	<!--  <filter-class>com.darwino.j2ee.servlet.authentication.FormAuthenticationFilter</filter-class> -->
	<filter>
    	<filter-name>DarwinoAuthentication</filter-name>
   		<filter-class>com.darwino.j2ee.servlet.authentication.FormAuthenticationFilter</filter-class>
    </filter>
	<filter-mapping>
    	<filter-name>DarwinoAuthentication</filter-name>
    	<url-pattern>/*</url-pattern>
    	<url-pattern>/dwo_auth_post</url-pattern>
   		<dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
   </filter-mapping>
  	
	<!--  Filter for creating the Darwino Application, Context and DB session -->
	<!--  This filter must be first so all the other filters can access the app -->
	<filter>
    	<filter-name>DarwinoApplication</filter-name>
    	<filter-class>com.darwino.j2ee.application.DarwinoJ2EEFilter</filter-class>
    	<!-- 
    	<init-param>
        	<param-name>varName</param-name>
        	<param-value>__newsdatabase_session</param-value>
    	</init-param>
    	 -->
	</filter>
	<filter-mapping>
    	<filter-name>DarwinoApplication</filter-name>
    	<url-pattern>/*</url-pattern>
	</filter-mapping>
			
	<!--  Filter for $darwino URL rewriting -->
	<!--  This filter must be before the services or resources filters, to make sure that the URL is processed before reaching them -->
	<filter>
    	<filter-name>DarwinoRewriting</filter-name>
    	<filter-class>com.darwino.j2ee.servlet.resources.DarwinoGlobalPathRewriterFilter</filter-class>
   	</filter>
	<filter-mapping>
    	<filter-name>DarwinoRewriting</filter-name>
    	<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--  Filter for publishing the Darwino Services -->
	<filter>
    	<filter-name>DarwinoServices</filter-name>
    	<filter-class>biz.webgate.darwino.coag.app.DarwinoServiceDispatcher</filter-class>
	</filter>
	<filter-mapping>
    	<filter-name>DarwinoServices</filter-name>
    	<url-pattern>/*</url-pattern>
    	<!-- DarwinoRewriting can trigger a forward  -->
    	<dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
   </filter-mapping>
		
	<!--  Filter for Gzip -->
	<filter>
    	<filter-name>GZipFilter</filter-name>
    	<filter-class>com.darwino.j2ee.servlet.gzip.GZipServletFilter</filter-class>
	</filter>
	<filter-mapping>
    	<filter-name>GZipFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    	<dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
    </filter-mapping>
	
	<!--  CORS filter for the JsonStore -->
<!-- 	
	<filter>
    	<filter-name>Cors</filter-name>
    	<filter-class>com.darwino.j2ee.servlet.cors.CorsFilter</filter-class>
	</filter>
	<filter-mapping>
    	<filter-name>Cors</filter-name>
    	<url-pattern>/jsonstore/*</url-pattern>
    	<dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
    </filter-mapping>
-->    
			
	<!-- Welcome pages -->
  	<welcome-file-list>
    	<welcome-file>index.html</welcome-file>
  	</welcome-file-list>

<!-- Enable this to use the J2EE CONTAINER security -->
<!-- 
	<security-role>
		<role-name>user</role-name>
	</security-role>
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>ApplicationRoot</web-resource-name>
			<url-pattern>/*</url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<role-name>user</role-name>
		</auth-constraint>
	</security-constraint>

	<login-config>
		<auth-method>BASIC</auth-method>
		<realm-name>coag</realm-name>
	</login-config>
 --> 	
</web-app>
